// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/url_repository.go
//
// Generated by this command:
//
//	mockgen -source=repositories/url_repository.go -destination=repositories/mocks/mock_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"
	models "Backend/models"

	gomock "go.uber.org/mock/gomock"
)

// MockUrlRepositoryInterface is a mock of UrlRepositoryInterface interface.
type MockUrlRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUrlRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockUrlRepositoryInterfaceMockRecorder is the mock recorder for MockUrlRepositoryInterface.
type MockUrlRepositoryInterfaceMockRecorder struct {
	mock *MockUrlRepositoryInterface
}

// NewMockUrlRepositoryInterface creates a new mock instance.
func NewMockUrlRepositoryInterface(ctrl *gomock.Controller) *MockUrlRepositoryInterface {
	mock := &MockUrlRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUrlRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlRepositoryInterface) EXPECT() *MockUrlRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetUrlByShortUrl mocks base method.
func (m *MockUrlRepositoryInterface) GetUrlByShortUrl(shortUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrlByShortUrl", shortUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrlByShortUrl indicates an expected call of GetUrlByShortUrl.
func (mr *MockUrlRepositoryInterfaceMockRecorder) GetUrlByShortUrl(shortUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrlByShortUrl", reflect.TypeOf((*MockUrlRepositoryInterface)(nil).GetUrlByShortUrl), shortUrl)
}

// IncrementCounterVisit mocks base method.
func (m *MockUrlRepositoryInterface) IncrementCounterVisit(shortUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementCounterVisit", shortUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementCounterVisit indicates an expected call of IncrementCounterVisit.
func (mr *MockUrlRepositoryInterfaceMockRecorder) IncrementCounterVisit(shortUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCounterVisit", reflect.TypeOf((*MockUrlRepositoryInterface)(nil).IncrementCounterVisit), shortUrl)
}

// InsertWithShortUrl mocks base method.
func (m *MockUrlRepositoryInterface) InsertWithShortUrl(url *models.Url, shortUrl *models.ShortUrl) (*models.ShortUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWithShortUrl", url, shortUrl)
	ret0, _ := ret[0].(*models.ShortUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertWithShortUrl indicates an expected call of InsertWithShortUrl.
func (mr *MockUrlRepositoryInterfaceMockRecorder) InsertWithShortUrl(url, shortUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWithShortUrl", reflect.TypeOf((*MockUrlRepositoryInterface)(nil).InsertWithShortUrl), url, shortUrl)
}
